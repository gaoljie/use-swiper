{"version":3,"sources":["webpack:///../doc/dynamic-render.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","useState","Playground","useSwiper","show","setShow","ref","onClick","list","setList","prev","length","map","item","key","isMDXComponent"],"mappings":"6RAUaA,G,oBAAe,S,wMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,2YAA4YC,SAAO,GACpbJ,QACAH,kBACAQ,oBACAC,eACAC,eALob,gBAMpbV,IANob,EAOpbH,eAPob,GAQnbO,QAAQ,eACZ,WAAM,MACuBI,oBAAS,GAA1BG,EADN,KACYC,EADZ,KAGCC,EACEH,cADFG,IAEF,OAAO,gCACP,sBAAQC,QAAS,kBAAMF,GAASD,KAAhC,UACCA,GAAQ,mBAAKE,IAAKA,GACf,4BACA,4BACA,4BACA,4BACA,4BACA,iCAKR,iBAAQ,CACN,GAAM,gBADR,gBAGA,YAAC,IAAD,CAAYR,WAAY,EAAGC,OAAQ,6WAA8WC,SAAO,GACtZJ,QACAH,kBACAQ,oBACAC,eACAC,eALsZ,gBAMtZV,IANsZ,EAOtZH,eAPsZ,GAQrZO,QAAQ,eACZ,WAAM,MACuBI,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,IAAvCO,EADN,KACYC,EADZ,KAGCH,EACEH,cADFG,IAEF,OAAO,gCACP,sBAAQC,QAAS,kBAAME,GAAQ,SAAAC,GAAI,4BAAQA,GAAR,CAAcA,EAAKC,OAAS,SAA/D,gBAGA,mBAAKL,IAAKA,GACPE,EAAKI,KAAI,SAAAC,GAAI,OAAI,mBAAKC,IAAKD,GAAOA,iB,sMAS7CnB,EAAWqB,gBAAiB","file":"component---doc-dynamic-render-mdx-fd7da22ebb5a108e2981.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jay/Repos/gaoljie/use-swiper/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState } from \"react\";\nimport { Playground } from \"docz\";\nimport useSwiper from \"../src\";\nimport \"../src/example.scss\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"conditional-render\"\n    }}>{`Conditional Render`}</h1>\n    <Playground __position={0} __code={'() => {\\n  const [show, setShow] = useState(true)\\n  const { ref } = useSwiper()\\n  return (\\n    <>\\n      <button onClick={() => setShow(!show)}>Toggle</button>\\n      {show && (\\n        <div ref={ref}>\\n          <div>1</div>\\n          <div>2</div>\\n          <div>3</div>\\n          <div>4</div>\\n          <div>5</div>\\n          <div>6</div>\\n        </div>\\n      )}\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      useSwiper,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [show, setShow] = useState(true);\n        const {\n          ref\n        } = useSwiper();\n        return <>\n        <button onClick={() => setShow(!show)}>Toggle</button>\n        {show && <div ref={ref}>\n            <div>1</div>\n            <div>2</div>\n            <div>3</div>\n            <div>4</div>\n            <div>5</div>\n            <div>6</div>\n          </div>}\n      </>;\n      }}\n    </Playground>\n    <h1 {...{\n      \"id\": \"dynamic-list\"\n    }}>{`Dynamic List`}</h1>\n    <Playground __position={1} __code={'() => {\\n  const [list, setList] = useState([1, 2, 3, 4, 5])\\n  const { ref } = useSwiper()\\n  return (\\n    <>\\n      <button onClick={() => setList(prev => [...prev, prev.length + 1])}>\\n        Add New Item\\n      </button>\\n      <div ref={ref}>\\n        {list.map(item => (\\n          <div key={item}>{item}</div>\\n        ))}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      useSwiper,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [list, setList] = useState([1, 2, 3, 4, 5]);\n        const {\n          ref\n        } = useSwiper();\n        return <>\n        <button onClick={() => setList(prev => [...prev, prev.length + 1])}>\n          Add New Item\n        </button>\n        <div ref={ref}>\n          {list.map(item => <div key={item}>{item}</div>)}\n        </div>\n      </>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}